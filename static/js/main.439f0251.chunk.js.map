{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["defaultMember","score","current","name","App","elList","state","memberList","componentDidMount","resetMemberList","_","times","setState","addMemeber","member","push","removeMember","filter","item","applyData","map","index","querySelector","value","parseInt","className","this","key","ref","type","placeholder","defaultValue","toFixed","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oOAKMA,EAAgB,CACpBC,MAAO,GACPC,QAAS,GACTC,KAAM,UAGaC,E,2MACnBC,OAAS,G,EACTC,MAAQ,CACNH,KAAM,MACNI,WAAY,M,EAGdC,kBAAoB,WAClB,EAAKC,mB,EAGPA,gBAAkB,WAChB,IAAMF,EAAaG,IAAEC,MAAM,GAAG,kBAAMX,KACpC,EAAKY,SAAS,CAAEL,gB,EAGlBM,WAAa,SAAAC,GACX,IAAMP,EAAa,EAAKD,MAAMC,WAAWQ,KAAKD,GAC9C,EAAKF,SAAS,CAACL,gB,EAGjBS,aAAe,SAAAF,GACb,IAAMP,EAAaG,IAAEO,OAAO,EAAKX,MAAMC,YAAY,SAAAW,GAAI,OAAIA,IAASJ,KACpE,EAAKF,SAAS,CAACL,gB,EAGjBY,UAAY,WACV,EAAKP,SAAS,CAAEL,WAAY,EAAKD,MAAMC,WAAWa,KAAI,SAACF,EAAMG,GAC3D,MAAO,CACLlB,KAAM,EAAKE,OAAOgB,GAAOC,cAAc,oBAAoBC,MAC3DtB,MAAOuB,SAAS,EAAKnB,OAAOgB,GAAOC,cAAc,qBAAqBC,MAAO,IAC7ErB,QAASsB,SAAS,EAAKnB,OAAOgB,GAAOC,cAAc,uBAAuBC,MAAO,W,wEAK7E,IAAD,OACP,OACE,yBAAKE,UAAU,aACb,2BAAOA,UAAU,SACf,+BACE,4BACE,4CACA,4CACA,oDACA,oDACA,+CACA,yCACA,kDAGJ,+BACIC,KAAKpB,MAAMC,YAAcmB,KAAKpB,MAAMC,WAAWa,KAAI,SAACN,EAAQO,GAAT,OACnD,wBAAIM,IAAKN,EAAOO,IAAK,SAAAA,GAAG,OAAI,EAAKvB,OAAOgB,GAASO,IAC/C,4BAAKP,EAAQ,GACb,4BAAI,2BAAOI,UAAU,QAAQI,KAAK,OAAO1B,KAAK,OAAO2B,YAAY,aAAaC,aAAcjB,EAAOX,QACnG,4BAAI,2BAAOsB,UAAU,QAAQI,KAAK,OAAO1B,KAAK,QAAQ2B,YAAY,aAAaC,aAAcjB,EAAOb,SACpG,4BAAI,2BAAOwB,UAAU,QAAQI,KAAK,OAAO1B,KAAK,UAAU2B,YAAY,aAAaC,aAAcjB,EAAOZ,WACtG,6BAAM,IAAIY,EAAOb,OAAO+B,QAAQ,GAAhC,KACA,6BAAM,IAAIlB,EAAOb,OAAOa,EAAOb,MAAMa,EAAOZ,UAAU8B,QAAQ,GAA9D,KACA,6BAAM,IAAIlB,EAAOb,MAAMa,EAAOZ,SAAS8B,QAAQ,GAA/C,WAKR,4BAAQP,UAAU,oBAAoBQ,QAASP,KAAKP,WAApD,e,GAjEyBe,IAAMC,WCCnBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.439f0251.chunk.js","sourcesContent":["import 'bulma/css/bulma.min.css';\nimport _ from 'lodash';\n\nimport React from 'react';\n\nconst defaultMember = {\n  score: 10,\n  current: 10,\n  name: 'dangmi'\n}\n\nexport default class App extends React.Component {\n  elList = []\n  state = {\n    name: 'man',\n    memberList: null,\n  }\n\n  componentDidMount = () => {\n    this.resetMemberList();\n  }\n\n  resetMemberList = () => {\n    const memberList = _.times(3, () => defaultMember)\n    this.setState({ memberList })\n  }\n\n  addMemeber = member => {\n    const memberList = this.state.memberList.push(member)\n    this.setState({memberList})\n  }\n\n  removeMember = member => {\n    const memberList = _.filter(this.state.memberList, item => item !== member)\n    this.setState({memberList})\n  }\n\n  applyData = () => {\n    this.setState({ memberList: this.state.memberList.map((item, index) => {\n      return {\n        name: this.elList[index].querySelector('input[name=name]').value,\n        score: parseInt(this.elList[index].querySelector('input[name=score]').value, 10),\n        current: parseInt(this.elList[index].querySelector('input[name=current]').value, 10),\n      }\n    })})\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <table className=\"table\">\n          <thead>\n            <tr>\n              <th>순번</th>\n              <th>이름</th>\n              <th>다마(개)</th>\n              <th>현재(개)</th>\n              <th>남음(%)</th>\n              <th>뺌(%)</th>\n              <th>1개당(%)</th>\n            </tr>\n          </thead>\n          <tbody>\n            { this.state.memberList && this.state.memberList.map((member, index) => (\n              <tr key={index} ref={ref => this.elList[index] = ref}>\n                <td>{index + 1}</td>\n                <td><input className=\"input\" type=\"text\" name=\"name\" placeholder=\"Text input\" defaultValue={member.name} /></td>\n                <td><input className=\"input\" type=\"text\" name=\"score\" placeholder=\"Text input\" defaultValue={member.score} /></td>\n                <td><input className=\"input\" type=\"text\" name=\"current\" placeholder=\"Text input\" defaultValue={member.current} /></td>\n                <td>{(100/member.score).toFixed(2)}%</td>\n                <td>{(100/member.score*(member.score-member.current)).toFixed(2)}%</td>\n                <td>{(100/member.score*member.current).toFixed(2)}%</td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n        <button className=\"button is-success\" onClick={this.applyData}>Apply!</button>\n      </div>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}